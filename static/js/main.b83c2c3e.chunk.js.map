{"version":3,"sources":["images/image.png","logo.svg","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","color","gutterBottom","start","duration","separator","end","value","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fd","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","InputLabel","id","Select","labelId","defaultValue","onChange","e","target","MenuItem","key","i","App","state","fetchedData","setState","this","style","src","coronaImage","image","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b83c2c3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed){\n        return 'loading...'\n    }\n    const duration = 1\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3}  justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography variant=\"h4\" color=\"textSecondadry\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                duration={duration}\n                                separator=\",\"\n                                end={confirmed.value}></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondadry\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography variant=\"h4\" color=\"textSecondadry\" gutterBottom>Recoveries</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                duration={duration}\n                                separator=\",\"\n                                end={recovered.value}></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondadry\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                    <Typography variant=\"h4\" color=\"textSecondadry\" gutterBottom>Deaths</Typography>\n                    <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                duration={duration}\n                                separator=\",\"\n                                end={deaths.value}></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondadry\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19 </Typography>\n                    </CardContent>\n                </Grid>\n                \n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api'\n\n\nexport const fetchData = async (country) => {\n\n    let changeableUrl = url;\n    if (country){\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        console.log(error);\n        \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        return data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n    } catch (error) {\n        console.log(error);\n        \n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: {countries} } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n        \n    }\n}","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport  styles from './Charts.module.css';\n\nconst Charts = ({data : {confirmed, recovered, deaths}, country}) => {\n\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchApi = async() => {\n            let fd = await fetchDailyData();   \n            setDailyData(fd);\n        }\n        \n        fetchApi();\n    }, [setDailyData])\n    \n    const lineChart = (\n        dailyData.length ?\n        (<Line \n            data = {{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data: dailyData.map(({confirmed}) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                }, {\n                    data: dailyData.map(({deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true\n                }],\n            }}\n        />) : null\n    );\n\n    const barChart = (\n        confirmed ? \n        (\n            <Bar \n                data = {{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)'\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options = {{\n                    legend: {display: false},\n                    title: {display: true, text: `Current state in ${country}`}\n                }}\n            />\n        ): null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart: lineChart }\n        </div>\n    )\n}\n\nexport default Charts;","import React, {useState, useEffect} from 'react';\nimport  styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport MenuItem from '@material-ui/core/MenuItem'\nimport  FormControl  from '@material-ui/core/FormControl';\nimport  Select from '@material-ui/core/Select';\n\n\n\n\nconst CountryPicker = ({handleCountryChange}) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(() => {\n        const fetchApi = async() => {\n            let fd = await fetchCountries();   \n            setFetchedCountries(fd);\n        }\n        fetchApi();\n    }, [setFetchedCountries])\n    \n\n    return (\n            <FormControl variant=\"outlined\" className={styles.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Countries</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}\n                    label=\"Age\"\n                >\n                <MenuItem value='' key=\"-1\">\n                    Gobal\n                </MenuItem>\n                    {fetchedCountries.map((country, i) => <MenuItem key={i} value={country}>{country}</MenuItem> )}\n                </Select>\n            </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Cards, Charts, CountryPicker} from './components';\nimport style from './App.module.css';\nimport {fetchData } from './api'\n\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount(){\n    const fetchedData  = await fetchData();\n    this.setState({data:fetchedData});\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData  = await fetchData(country);\n    this.setState({data:fetchedData, country: country});\n  }\n\n  render(){\n    const {data, country} = this.state;\n    return (\n      <div className={style.container}>\n        <img src={coronaImage} className={style.image} alt=\"COVID-19\"/>\n          <Cards data={data}/>\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\n          <Charts data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}